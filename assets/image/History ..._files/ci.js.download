















































var bt_rpc_img = new Image();
function bt_updateStatus(a_adi){
	if(document.bt_invitation_id != ''){
		var canReinvite = window.pageViewer && pageViewer.reinvite;
		if(canReinvite) {
			setTimeout(function(){ pageViewer.reinvite(document.bt_invitation_id, a_adi); }, a_adi == 0 ? 30000 : 1);
		} 
		if(!canReinvite || a_adi == 0) {
			var bt_rpc_url = 'https://rpc-eu.boldchat.com/aid/128910941182982045/bc.irpc/PublicServer?m=inviteStatus&p0=128910941182982045';
			bt_rpc_url += ('&p1=' + document.bt_invitation_id);
			bt_rpc_url += ('&p2=' + (document.bt_auto_invite ? '1' : '0'));
			bt_rpc_url += ('&p3=' + a_adi);
			bt_rpc_url += ('&kill=' + (new Date()).getTime());
	   
			bt_rpc_img.src = bt_rpc_url;
	   
		}
	}
}


    
    
        
    






(function(doc, win, undefined) {

    /**
	* requestAnimationFrame polyfill by Erik Mï¿½ller. Fixes from Paul Irish and Tino Zijdel.
	* MIT license
	*/ 
    var lastTime = 0,
        vendors = ['ms', 'moz', 'webkit', 'o'],
        vendorsLength = vendors.length;

    for(var x = 0; x < vendorsLength && !win.requestAnimationFrame; ++x) {
        win.requestAnimationFrame = win[vendors[x]+'RequestAnimationFrame'];
        win.cancelAnimationFrame = win[vendors[x]+'CancelAnimationFrame']
                                    || win[vendors[x]+'CancelRequestAnimationFrame'];
    }

    if (!win.requestAnimationFrame){
        win.requestAnimationFrame = function(callback, element) {
            var currTime = new Date().getTime(),
                timeToCall = Math.max(0, 16 - (currTime - lastTime)),
                id = win.setTimeout(function() { callback(currTime + timeToCall); },
                timeToCall);

            lastTime = currTime + timeToCall;
            return id;
        };
    }
    if (!win.cancelAnimationFrame){
        win.cancelAnimationFrame = function(id) {
            clearTimeout(id);
        };
    }
    
    /**
    * BoldChat utils
    * @this {bc}
    */
    win.bc = win.bc || {};
    win.bc.guid = 1; //unique id to identify attached handlers
    win.bc.handlerQueue = []; //store attached events for IE to prevent memory leak
    win.bc.getStyle = function(el,styleProp){ // get computed style of element
        var y;
        if (el.currentStyle){
            y = el.currentStyle[styleProp];
        } else if (win.getComputedStyle){
            y = doc.defaultView.getComputedStyle(el,null).getPropertyValue(styleProp);
        }
        return y;
     };
     win.bc.handleEvent = function(ev){ //IE event handler
        var returnValue = true;

        if(!ev){
           ev = win.event;

           ev.target = ev.srcElement;
           ev.preventDefault = function(){
               ev.returnValue = false;
           }
           ev.stopPropagation = function(){
               ev.cancelBubble = true;
           }
        }

	    var handlers = this.bcEvents[ev.type];

	    for (var i in handlers) {
	        this.bcHandleEvent = handlers[i];
	        if (this.bcHandleEvent(ev) === false) {
	            returnValue = false;
	        }
	    }
	    return returnValue;
    };
    win.bc.styleSheet = function(def, styleId){ //add stylesheet to document
        if(!styleId){
           styleId = 'bc-styles';
        }
        var style = doc.getElementById(styleId);

        if(!style){
            style = doc.createElement('style');
            style.setAttribute('type', 'text/css');
            style.setAttribute('id', styleId);
            doc.getElementsByTagName('head')[0].appendChild(style);
        }

        if (style.styleSheet) {   // IE
            style.styleSheet.cssText = def;
        } else {
            style.innerHTML = def;
        }
    };

	if ('addEventListener' in win){
		bc.addListener = function ( el, type, handler ) {
			el.addEventListener(type, handler, false);
		};
		bc.removeListener = function ( el, type, handler ){
			el.removeEventListener(type, handler, false);
		};
	} else { // eventListener for old browsers based on http://dean.edwards.name/my/events.js
		bc.addListener = function ( el, type, handler ){ //IE 
            
	        if (!handler.bcGuid) handler.bcGuid = bc.guid++;    
	        if (!el.bcEvents) el.bcEvents = {};
	        
	        var handlers = el.bcEvents[type];   
	        if (!handlers) {
	            handlers = el.bcEvents[type] = {};       
	            if (el["on" + type]) { 
	                handlers[0] = el["on" + type];
	            }
	        }
	        
	        handlers[handler.bcGuid] = handler;     
	        el["on" + type] = bc.handleEvent;
	        
	        bc.handlerQueue.push({el:el, type:type, handler:handler});		
			
		};
		bc.removeListener = function ( el, type, handler ){
	        if (el.bcEvents && el.bcEvents[type]) {
	            delete el.bcEvents[type][handler.bcGuid];
	        }
		};
	}
    
    bc.cleanListeners = function(){
        var len = bc.handlerQueue.length;
        while(len--){
            var item = bc.handlerQueue[len];
            bc.removeListener(item.el, item.type, item.handler);    
        }
        bc.handlerQueue.length = 0;
    };
    
	bc.addListener( win, 'unload', bc.cleanListeners);

    
	bc.updateLeftScroll = function(){
		bc.leftScroll = Math.max(document.body && document.body.scrollLeft || 0, document.documentElement && document.documentElement.scrollLeft || 0)
	};
	bc.updateTopScroll = function(){
		bc.topScroll = Math.max(document.body && document.body.scrollTop || 0, document.documentElement && document.documentElement.scrollTop || 0)
	};
	bc.updateLeftScroll();
	bc.updateTopScroll();


	//listeners
	bc.addListener( win, 'scroll', function(){
		if(!doc.bt_document_relative && bt_animation_box_sty) {
			bc.updateLeftScroll();
			bc.updateTopScroll();
			bt_animation_box_sty.top = bt_top(bt_currentY) + 'px';
			bt_animation_box_sty.left = bt_left(bt_currentX) + 'px';
		}
	});
	

}(document, window));

// Inner width is usually set to the window width, except in IE 6-8 strict, where it is in document element, and IE 6+ quirks, where it is in the body
var bt_doc_width = (document.body.clientWidth || window.innerWidth || document.documentElement.clientWidth),
	bt_doc_height = (document.body.clientHeight || window.innerHeight || document.documentElement.clientHeight),
	bt_doc_x_top,
	bt_currentX,
	bt_currentY,
	bt_opacity,
	bt_x_animation_step,
	bt_x_animation_every,
	bt_x_increment_saved,
	bt_x_increment,
	bt_timer = null,
	timeHelper;


function bt_hideAnimation() {
	bt_hideAnimationImpl(1);
}

// a_aid: 0=accepted,1=declined,2=ignored

window.bt_hidden = false;
function bt_hideAnimationImpl(a_adi) {
	if(window.bt_hidden) return;
	window.bt_hidden = true;
	bt_animation_box_sty.display = 'none';
	if(bt_timer != null) {
	   clearTimeout(bt_timer);
	}
	bt_timer = null;
	timeHelper = null;
	bt_updateStatus(a_adi);
}

function bt_animationStep(){
	if(bt_animation_box_sty.display == 'none') {
		return;
	}

	var now = new Date().getTime(),
		dt = now - (timeHelper || now); // ms since last anim
	timeHelper = now;

	var newX = bt_currentX + bt_x_increment * (dt / bt_x_animation_every);

	if (bt_x_increment > 0) {
		if (newX < bt_doc_x_top) {
			//TODO: use position:fixed to avoid bc.leftScroll calc
			bt_currentX = newX;
			bt_animation_box_sty.left = (bc.leftScroll + bt_currentX) + 'px';
			bt_timer = setTimeout(bt_animationStep, bt_x_animation_every);
		} else {
			if(document.bt_animation_type==1) {
				bt_timer = setTimeout(function(){
					bt_hideAnimationImpl(2);
				}, 3000);
			} else {
				bt_x_increment_saved = -bt_x_increment_saved;
				bt_x_increment = bt_x_increment_saved;
				bt_timer = setTimeout(bt_animationStep, bt_x_animation_every);
			}
		}
	} else if (bt_x_increment < 0) {
		if (bt_currentX > 0) {
			bt_currentX = newX;
			bt_animation_box_sty.left = (bc.leftScroll + bt_currentX) + 'px';
			bt_timer = setTimeout(bt_animationStep, bt_x_animation_every);
		} else {
			if(document.bt_animation_type==1) {
				bt_x_increment_saved = -bt_x_increment_saved;
				bt_x_increment = bt_x_increment_saved;
				bt_timer = setTimeout(bt_animationStep, bt_x_animation_every);
			} else {
				bt_timer = setTimeout(function(){
					bt_hideAnimationImpl(2);
				}, 3000);
			}
		}
	} else {
		if(bt_x_increment_saved == 0) {
			bt_timer = setTimeout(function(){
				bt_hideAnimationImpl(2);
			}, document.bt_animation_time);
		} else {
			bt_timer = setTimeout(bt_animationStep, 1000);
		}
	}
}

// Set animation parameters

function bt_inviteCallback() {


    
        
        
			if(document.bt_standardizes_html) {
				bt_doc_width = document.documentElement.clientWidth || window.innerWidth || document.body.clientWidth;
				bt_doc_height = document.documentElement.clientHeight || window.innerHeight || document.body.clientHeight;
			}
		
		     
			var bt_animation_div = document.bt_invite_div_old;
			bt_animation_box_sty = bt_animation_div.style;
			var bt_box_width = parseInt(bt_animation_box_sty.width, 10);
			var bt_box_height = parseInt(bt_animation_box_sty.height, 10);
			bt_doc_x_top = bt_doc_width - bt_box_width;
			bt_x_animation_every = Math.round(0.99 * (document.bt_animation_time / (bt_doc_x_top * 2)));
			bt_x_animation_step = ((document.bt_animation_type == 1) ? -1 : ((document.bt_animation_type == 0) ? 1 : 0));
		
			if(bt_x_animation_step != 0) {
				if (bt_x_animation_every < 25) {
					bt_x_animation_every = 25;
					var bt_num_steps = document.bt_animation_time / bt_x_animation_every;
					bt_x_animation_step = Math.round((bt_doc_x_top * 2) / bt_num_steps);
				}
			}
			bt_x_increment_saved = bt_x_animation_step;
			bt_x_increment = bt_x_increment_saved;
		
			if(document.bt_document_relative) {
		
				switch(document.bt_vertical_align) {
					case 0:
						bt_currentY = document.bt_vertical_offset;
						break;
					case 1:
						bt_currentY = (bt_doc_height / 2) - (bt_box_height / 2) + document.bt_vertical_offset;
						break;
					case 2:
						bt_currentY = bt_doc_height - document.bt_vertical_offset - bt_box_height;
						break;
				}
		
			 	switch(document.bt_horizontal_align) {
			 		case 0:
						bt_currentX = document.bt_horizontal_offset;
			 			break;
			 		case 1:
						bt_currentX = (bt_doc_width / 2) - (bt_box_width / 2) + document.bt_horizontal_offset;
			 			break;
			 		case 2:
						bt_currentX = bt_doc_width - document.bt_horizontal_offset - bt_box_width;
			 			break;
			 	}
		
			} else {
				bt_currentX = (bt_doc_width - bt_box_width) * document.bt_horizontal_offset / 100.0;
			 	bt_currentY = (bt_doc_height - bt_box_height) * document.bt_vertical_offset / 100.0;
			}
			
			// Position div initially
			bt_animation_box_sty.zIndex = 3141592;
			bt_animation_box_sty.position = 'absolute';
			bt_animation_box_sty.top = bt_top(bt_currentY) + 'px';
			bt_animation_box_sty.left = bt_left(bt_currentX) + 'px';
		
			// Make outer div visible
		
			if(document.bt_animation_type == 3) {
				bt_opacity = 5;
				bt_animation_box_sty.opacity = '' + (bt_opacity / 100.0);
				bt_animation_box_sty.filter = 'alpha(opacity=' + bt_opacity + ')';
				bt_timer = setTimeout(bt_fadingStep, 100);
				bt_animation_box_sty.display = 'block';
			} else {
				bt_animation_box_sty.opacity = 100;
				bt_animation_box_sty.filter = 'alpha(opacity=100)';
				bt_animation_box_sty.display = 'block';
				bt_timer = setTimeout(bt_animationStep, 5000);
			}
	   
    
}

	
		function bt_left(a_in_doc) {
			return (document.bt_document_relative) ? a_in_doc : bc.leftScroll + a_in_doc;
		}
		
		function bt_top(a_in_doc) {
			return (document.bt_document_relative) ? a_in_doc : bc.topScroll + a_in_doc;
		}
		
		//Note: Opacity < 100 because of Firefox + audio bug.
		
		function bt_fadingStep() {
			bt_opacity += 5;
			if(bt_opacity >= 100) {
				bt_opacity = 99;
			}
			bt_animation_box_sty.opacity = bt_opacity / 100.0;
			bt_animation_box_sty.filter = 'alpha(opacity=' + bt_opacity + ')';
			if(bt_opacity < 99) {
				bt_timer = setTimeout(bt_fadingStep, 100);
			} else {
				bt_timer = setTimeout(function(){
					bt_hideAnimationImpl(2);
				}, document.bt_animation_time);
			}
		}
		
		
		function bt_pause() {
			bt_x_increment = 0;
		}
		
		function bt_resume() {
			bt_x_increment = bt_x_increment_saved;
		}
	



function bt_isBlank(a_text) {
	return (a_text == null || a_text == '');
}

function bt_utf8(wide) {
	var c,
		s,
		enc = '',
		i = 0,
		len = wide.length;
	while(i < len) {
		c= wide.charCodeAt(i++);
		if (c>=0xDC00 && c<0xE000) {
			continue;
		}
		if (c>=0xD800 && c<0xDC00) {
			if (i>=wide.length) {
				continue;
			}
			s = wide.charCodeAt(i++);
			if (s<0xDC00 || c>=0xDE00) {
				continue;
			}
			c = ((c-0xD800)<<10)+(s-0xDC00)+0x10000;
		}
		if (c<0x80) {
			enc += String.fromCharCode(c);
		} else if (c<0x800) {
			enc += String.fromCharCode(0xC0+(c>>6),0x80+(c&0x3F));
		} else if (c<0x10000) {
			enc += String.fromCharCode(0xE0+(c>>12),0x80+(c>>6&0x3F),0x80+(c&0x3F));
		} else {
			enc += String.fromCharCode(0xF0+(c>>18),0x80+(c>>12&0x3F),0x80+(c>>6&0x3F),0x80+(c&0x3F));
		}
	}
	return enc;
}



		function bt_openChat(keyMessageOrOptions, initialQuestion, name, email) {
			var options = typeof keyMessageOrOptions === 'object' && keyMessageOrOptions || {
				keyMessage: keyMessageOrOptions,
				initialQuestion: initialQuestion,
				name: name,
				email: email
			};
			var bt_chat_url = 'https://livechat-eu.boldchat.com/aid/128910941182982045/bc.chat?resize=true&wdid=130146643996982784&cwdid=130337780394393709&s=-eu&ct=4&itvid=130146644340842925';
			bt_chat_url = bt_chat_url + (document.bt_operator_id == null ? '' : '&aoid=' + document.bt_operator_id);
			bt_chat_url = bt_chat_url + (bt_isBlank(options.initialQuestion) ? '' : '&iq=' + escape(bt_utf8(options.initialQuestion))) + (bt_isBlank(options.name) ? '' : '&vn=' + escape(bt_utf8(options.name))) + (bt_isBlank(options.email) ? '' : '&ve=' + escape(options.email));

			// Unsecure, cannot pass km
			bt_chat_url = bt_chat_url + (bt_isBlank(options.keyMessage) ? '' : '&km=true');
			bt_chat_url = bt_chat_url + '&url=' + escape(document.location.href);


			if(window._bcvmw) {
				window._bcvmw.chatWindow({
					url: bt_chat_url + '&cbdid=&cwdid=130337780394393709&ct=4&iid=131079200447590514&unsecured=iq%26vn&group=',
					embed: true,
					invite: true , cwdid: '130337780394393709',
					bt_override: false,
					id: 'pageView',
					name: options.name,
					email: options.email,
					initialQuestion: options.initialQuestion,
					token: '1678532973524T94634643293D786BC42C084C466867BE34F46EBF4C260C26080AA8DFA1347817CBFF507A850ED7DEA4406D1CE7F794C9CE4586A77FB895B0C43CC0AE57E8F687',
					video: false,
					launchType: 'nanorep',
					// minimizeOnStart, showOnNextOperatorMessage, autoCloseOnNoOperators were introduced for the
					// campaign / auto-accepted javascript invitation use case, the nanorep campaign editor uses these
					minimizeOnStart: options.minimizeOnStart,
					showOnNextOperatorMessage: options.showOnNextOperatorMessage,
					autoCloseOnNoOperators: options.autoCloseOnNoOperators,
					showFloatingButtonsAfterChatStart: options.showFloatingButtonsAfterChatStart
				});
			} else {
				window.open((window.pageViewer && pageViewer.link || function(url){ return url; })(bt_chat_url + '',true), 'Chat128539483837680112', 'toolbar=0,scrollbars=1,location=0,statusbar=0,menubar=0,resizable=1,width=640,height=480');
			}



    
		     bt_hideAnimationImpl(0);
    
    

			 return false;
		}



	if(!document.bt_invite_div_old){
		var div = document.createElement('div');

		
		  
		  
		      div.setAttribute('id', 'bt_invite_box');
              div.setAttribute('name', 'bt_invite_box');
		      div.setAttribute('style', 'display: none');
		  
		
		
		var fix = function(){
					try {
						document.body.appendChild(div);
					} catch(e){
						try {
							document.body.insertBefore(div, document.body.firstChild);
						} catch(e){
							setTimeout(fix, 1000);
						}
					}
		};

		fix();

		document.bt_invite_div_old = div;
	}

	

	
		
		
			var bt_invite_div_html = '\n<style type=\"text/css\">#bt_invite_box * {padding: 0; margin: 0; border-width: 0;}\n#bt_invite_box input {padding: 4px; border-width: 2px}\n#bt_invite_box #bt_header_table td {padding: 2px 4px; }\n#bt_invite_box #bt_content_table td {padding: 1px 2px; }\n#bt_invite_box #bt_form_table td {padding: 3px 3px; }\n#bt_invite_box #bt_form_table table td, #bt_invite_box #bt_content_table table td {padding: 0; }</style>\n<div style=\"position: fixed; bottom: 100px; right: 50px\" onMouseOver=\"bt_pause();\" onMouseOut=\"bt_resume();\">\n    <a href=\"#\" onclick=\"return bt_openChat(\'\',\'\',\'\',\'\');\">\n        <img border=\"0\" src=\"https://nr1.s3.amazonaws.com/domainConfig/7FA796BD/7FA79C8F/vd5KJlWTONufK8z9giO0wQ/2/byju1.svg\" width=\"200\" height=\"100\">\n        <br>\n        \n    </a>\n    <img onclick=\"bt_hideAnimation();\" style=\"position:absolute;width:25%;height:30%;right:0%;top:0%;; z-index: 1000;>\n</div>\n',
			bt_invite_div = document.bt_invite_div_old;

			bt_invite_div.style.width = '200px';
			bt_invite_div.style.height = '100px';
		
	
    
    
	


	if(navigator.userAgent.indexOf('MSIE') != -1 || navigator.userAgent.indexOf('Trident') != -1){
		bt_invite_div_html += '<bgsound src=\"https://images.boldchat.com/ext/sounds/default_invite.wav\">';
	}

        
          
          
                bt_invite_div.innerHTML = '<div style="display: none;">_</div>' + bt_invite_div_html;
			    
			    document.bt_horizontal_align = 2;
			    document.bt_vertical_offset = 0;
			    document.bt_horizontal_offset = 0;
			    document.bt_document_relative = 0;

          
        
                
                //common parts
                document.bt_animation_type = 2;
                document.bt_animation_time = 999000;
                document.bt_initial_top = 200;
                document.bt_auto_invite = false;
                document.bt_invitation_id = '131079200447590514';
                document.bt_vertical_align = 2;
                document.bt_standardizes_html = 1;
                
                
                document.bt_operator_id = null;
                




	bt_inviteCallback();



